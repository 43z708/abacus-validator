import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { KMSServiceException as __BaseException } from "./KMSServiceException";
export declare enum AlgorithmSpec {
    RSAES_OAEP_SHA_1 = "RSAES_OAEP_SHA_1",
    RSAES_OAEP_SHA_256 = "RSAES_OAEP_SHA_256",
    RSAES_PKCS1_V1_5 = "RSAES_PKCS1_V1_5"
}

export interface AliasListEntry {
    
    AliasName?: string;
    
    AliasArn?: string;
    
    TargetKeyId?: string;
    
    CreationDate?: Date;
    
    LastUpdatedDate?: Date;
}
export declare namespace AliasListEntry {
    
    const filterSensitiveLog: (obj: AliasListEntry) => any;
}

export declare class AlreadyExistsException extends __BaseException {
    readonly name: "AlreadyExistsException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<AlreadyExistsException, __BaseException>);
}
export interface CancelKeyDeletionRequest {
    
    KeyId: string | undefined;
}
export declare namespace CancelKeyDeletionRequest {
    
    const filterSensitiveLog: (obj: CancelKeyDeletionRequest) => any;
}
export interface CancelKeyDeletionResponse {
    
    KeyId?: string;
}
export declare namespace CancelKeyDeletionResponse {
    
    const filterSensitiveLog: (obj: CancelKeyDeletionResponse) => any;
}

export declare class DependencyTimeoutException extends __BaseException {
    readonly name: "DependencyTimeoutException";
    readonly $fault: "server";
    
    constructor(opts: __ExceptionOptionType<DependencyTimeoutException, __BaseException>);
}

export declare class InvalidArnException extends __BaseException {
    readonly name: "InvalidArnException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidArnException, __BaseException>);
}

export declare class KMSInternalException extends __BaseException {
    readonly name: "KMSInternalException";
    readonly $fault: "server";
    
    constructor(opts: __ExceptionOptionType<KMSInternalException, __BaseException>);
}

export declare class KMSInvalidStateException extends __BaseException {
    readonly name: "KMSInvalidStateException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<KMSInvalidStateException, __BaseException>);
}

export declare class NotFoundException extends __BaseException {
    readonly name: "NotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
}

export declare class CloudHsmClusterInUseException extends __BaseException {
    readonly name: "CloudHsmClusterInUseException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<CloudHsmClusterInUseException, __BaseException>);
}

export declare class CloudHsmClusterInvalidConfigurationException extends __BaseException {
    readonly name: "CloudHsmClusterInvalidConfigurationException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<CloudHsmClusterInvalidConfigurationException, __BaseException>);
}

export declare class CloudHsmClusterNotActiveException extends __BaseException {
    readonly name: "CloudHsmClusterNotActiveException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<CloudHsmClusterNotActiveException, __BaseException>);
}

export declare class CloudHsmClusterNotFoundException extends __BaseException {
    readonly name: "CloudHsmClusterNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<CloudHsmClusterNotFoundException, __BaseException>);
}

export declare class CloudHsmClusterNotRelatedException extends __BaseException {
    readonly name: "CloudHsmClusterNotRelatedException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<CloudHsmClusterNotRelatedException, __BaseException>);
}
export interface ConnectCustomKeyStoreRequest {
    
    CustomKeyStoreId: string | undefined;
}
export declare namespace ConnectCustomKeyStoreRequest {
    
    const filterSensitiveLog: (obj: ConnectCustomKeyStoreRequest) => any;
}
export interface ConnectCustomKeyStoreResponse {
}
export declare namespace ConnectCustomKeyStoreResponse {
    
    const filterSensitiveLog: (obj: ConnectCustomKeyStoreResponse) => any;
}

export declare class CustomKeyStoreInvalidStateException extends __BaseException {
    readonly name: "CustomKeyStoreInvalidStateException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<CustomKeyStoreInvalidStateException, __BaseException>);
}

export declare class CustomKeyStoreNotFoundException extends __BaseException {
    readonly name: "CustomKeyStoreNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<CustomKeyStoreNotFoundException, __BaseException>);
}
export declare enum ConnectionErrorCodeType {
    CLUSTER_NOT_FOUND = "CLUSTER_NOT_FOUND",
    INSUFFICIENT_CLOUDHSM_HSMS = "INSUFFICIENT_CLOUDHSM_HSMS",
    INTERNAL_ERROR = "INTERNAL_ERROR",
    INVALID_CREDENTIALS = "INVALID_CREDENTIALS",
    NETWORK_ERRORS = "NETWORK_ERRORS",
    SUBNET_NOT_FOUND = "SUBNET_NOT_FOUND",
    USER_LOCKED_OUT = "USER_LOCKED_OUT",
    USER_LOGGED_IN = "USER_LOGGED_IN",
    USER_NOT_FOUND = "USER_NOT_FOUND"
}
export declare enum ConnectionStateType {
    CONNECTED = "CONNECTED",
    CONNECTING = "CONNECTING",
    DISCONNECTED = "DISCONNECTED",
    DISCONNECTING = "DISCONNECTING",
    FAILED = "FAILED"
}
export interface CreateAliasRequest {
    
    AliasName: string | undefined;
    
    TargetKeyId: string | undefined;
}
export declare namespace CreateAliasRequest {
    
    const filterSensitiveLog: (obj: CreateAliasRequest) => any;
}

export declare class InvalidAliasNameException extends __BaseException {
    readonly name: "InvalidAliasNameException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidAliasNameException, __BaseException>);
}

export declare class LimitExceededException extends __BaseException {
    readonly name: "LimitExceededException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
}
export interface CreateCustomKeyStoreRequest {
    
    CustomKeyStoreName: string | undefined;
    
    CloudHsmClusterId: string | undefined;
    
    TrustAnchorCertificate: string | undefined;
    
    KeyStorePassword: string | undefined;
}
export declare namespace CreateCustomKeyStoreRequest {
    
    const filterSensitiveLog: (obj: CreateCustomKeyStoreRequest) => any;
}
export interface CreateCustomKeyStoreResponse {
    
    CustomKeyStoreId?: string;
}
export declare namespace CreateCustomKeyStoreResponse {
    
    const filterSensitiveLog: (obj: CreateCustomKeyStoreResponse) => any;
}

export declare class CustomKeyStoreNameInUseException extends __BaseException {
    readonly name: "CustomKeyStoreNameInUseException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<CustomKeyStoreNameInUseException, __BaseException>);
}

export declare class IncorrectTrustAnchorException extends __BaseException {
    readonly name: "IncorrectTrustAnchorException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<IncorrectTrustAnchorException, __BaseException>);
}

export interface GrantConstraints {
    
    EncryptionContextSubset?: {
        [key: string]: string;
    };
    
    EncryptionContextEquals?: {
        [key: string]: string;
    };
}
export declare namespace GrantConstraints {
    
    const filterSensitiveLog: (obj: GrantConstraints) => any;
}
export declare enum GrantOperation {
    CreateGrant = "CreateGrant",
    Decrypt = "Decrypt",
    DescribeKey = "DescribeKey",
    Encrypt = "Encrypt",
    GenerateDataKey = "GenerateDataKey",
    GenerateDataKeyPair = "GenerateDataKeyPair",
    GenerateDataKeyPairWithoutPlaintext = "GenerateDataKeyPairWithoutPlaintext",
    GenerateDataKeyWithoutPlaintext = "GenerateDataKeyWithoutPlaintext",
    GetPublicKey = "GetPublicKey",
    ReEncryptFrom = "ReEncryptFrom",
    ReEncryptTo = "ReEncryptTo",
    RetireGrant = "RetireGrant",
    Sign = "Sign",
    Verify = "Verify"
}
export interface CreateGrantRequest {
    
    KeyId: string | undefined;
    
    GranteePrincipal: string | undefined;
    
    RetiringPrincipal?: string;
    
    Operations: (GrantOperation | string)[] | undefined;
    
    Constraints?: GrantConstraints;
    
    GrantTokens?: string[];
    
    Name?: string;
}
export declare namespace CreateGrantRequest {
    
    const filterSensitiveLog: (obj: CreateGrantRequest) => any;
}
export interface CreateGrantResponse {
    
    GrantToken?: string;
    
    GrantId?: string;
}
export declare namespace CreateGrantResponse {
    
    const filterSensitiveLog: (obj: CreateGrantResponse) => any;
}

export declare class DisabledException extends __BaseException {
    readonly name: "DisabledException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DisabledException, __BaseException>);
}

export declare class InvalidGrantTokenException extends __BaseException {
    readonly name: "InvalidGrantTokenException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidGrantTokenException, __BaseException>);
}
export declare enum CustomerMasterKeySpec {
    ECC_NIST_P256 = "ECC_NIST_P256",
    ECC_NIST_P384 = "ECC_NIST_P384",
    ECC_NIST_P521 = "ECC_NIST_P521",
    ECC_SECG_P256K1 = "ECC_SECG_P256K1",
    RSA_2048 = "RSA_2048",
    RSA_3072 = "RSA_3072",
    RSA_4096 = "RSA_4096",
    SYMMETRIC_DEFAULT = "SYMMETRIC_DEFAULT"
}
export declare enum KeySpec {
    ECC_NIST_P256 = "ECC_NIST_P256",
    ECC_NIST_P384 = "ECC_NIST_P384",
    ECC_NIST_P521 = "ECC_NIST_P521",
    ECC_SECG_P256K1 = "ECC_SECG_P256K1",
    RSA_2048 = "RSA_2048",
    RSA_3072 = "RSA_3072",
    RSA_4096 = "RSA_4096",
    SYMMETRIC_DEFAULT = "SYMMETRIC_DEFAULT"
}
export declare enum KeyUsageType {
    ENCRYPT_DECRYPT = "ENCRYPT_DECRYPT",
    SIGN_VERIFY = "SIGN_VERIFY"
}
export declare enum OriginType {
    AWS_CLOUDHSM = "AWS_CLOUDHSM",
    AWS_KMS = "AWS_KMS",
    EXTERNAL = "EXTERNAL"
}

export interface Tag {
    
    TagKey: string | undefined;
    
    TagValue: string | undefined;
}
export declare namespace Tag {
    
    const filterSensitiveLog: (obj: Tag) => any;
}
export interface CreateKeyRequest {
    
    Policy?: string;
    
    Description?: string;
    
    KeyUsage?: KeyUsageType | string;
    
    CustomerMasterKeySpec?: CustomerMasterKeySpec | string;
    
    KeySpec?: KeySpec | string;
    
    Origin?: OriginType | string;
    
    CustomKeyStoreId?: string;
    
    BypassPolicyLockoutSafetyCheck?: boolean;
    
    Tags?: Tag[];
    
    MultiRegion?: boolean;
}
export declare namespace CreateKeyRequest {
    
    const filterSensitiveLog: (obj: CreateKeyRequest) => any;
}
export declare enum EncryptionAlgorithmSpec {
    RSAES_OAEP_SHA_1 = "RSAES_OAEP_SHA_1",
    RSAES_OAEP_SHA_256 = "RSAES_OAEP_SHA_256",
    SYMMETRIC_DEFAULT = "SYMMETRIC_DEFAULT"
}
export declare enum ExpirationModelType {
    KEY_MATERIAL_DOES_NOT_EXPIRE = "KEY_MATERIAL_DOES_NOT_EXPIRE",
    KEY_MATERIAL_EXPIRES = "KEY_MATERIAL_EXPIRES"
}
export declare enum KeyManagerType {
    AWS = "AWS",
    CUSTOMER = "CUSTOMER"
}
export declare enum KeyState {
    Creating = "Creating",
    Disabled = "Disabled",
    Enabled = "Enabled",
    PendingDeletion = "PendingDeletion",
    PendingImport = "PendingImport",
    PendingReplicaDeletion = "PendingReplicaDeletion",
    Unavailable = "Unavailable",
    Updating = "Updating"
}
export declare enum MultiRegionKeyType {
    PRIMARY = "PRIMARY",
    REPLICA = "REPLICA"
}

export interface MultiRegionKey {
    
    Arn?: string;
    
    Region?: string;
}
export declare namespace MultiRegionKey {
    
    const filterSensitiveLog: (obj: MultiRegionKey) => any;
}

export interface MultiRegionConfiguration {
    
    MultiRegionKeyType?: MultiRegionKeyType | string;
    
    PrimaryKey?: MultiRegionKey;
    
    ReplicaKeys?: MultiRegionKey[];
}
export declare namespace MultiRegionConfiguration {
    
    const filterSensitiveLog: (obj: MultiRegionConfiguration) => any;
}
export declare enum SigningAlgorithmSpec {
    ECDSA_SHA_256 = "ECDSA_SHA_256",
    ECDSA_SHA_384 = "ECDSA_SHA_384",
    ECDSA_SHA_512 = "ECDSA_SHA_512",
    RSASSA_PKCS1_V1_5_SHA_256 = "RSASSA_PKCS1_V1_5_SHA_256",
    RSASSA_PKCS1_V1_5_SHA_384 = "RSASSA_PKCS1_V1_5_SHA_384",
    RSASSA_PKCS1_V1_5_SHA_512 = "RSASSA_PKCS1_V1_5_SHA_512",
    RSASSA_PSS_SHA_256 = "RSASSA_PSS_SHA_256",
    RSASSA_PSS_SHA_384 = "RSASSA_PSS_SHA_384",
    RSASSA_PSS_SHA_512 = "RSASSA_PSS_SHA_512"
}

export interface KeyMetadata {
    
    AWSAccountId?: string;
    
    KeyId: string | undefined;
    
    Arn?: string;
    
    CreationDate?: Date;
    
    Enabled?: boolean;
    
    Description?: string;
    
    KeyUsage?: KeyUsageType | string;
    
    KeyState?: KeyState | string;
    
    DeletionDate?: Date;
    
    ValidTo?: Date;
    
    Origin?: OriginType | string;
    
    CustomKeyStoreId?: string;
    
    CloudHsmClusterId?: string;
    
    ExpirationModel?: ExpirationModelType | string;
    
    KeyManager?: KeyManagerType | string;
    
    CustomerMasterKeySpec?: CustomerMasterKeySpec | string;
    
    KeySpec?: KeySpec | string;
    
    EncryptionAlgorithms?: (EncryptionAlgorithmSpec | string)[];
    
    SigningAlgorithms?: (SigningAlgorithmSpec | string)[];
    
    MultiRegion?: boolean;
    
    MultiRegionConfiguration?: MultiRegionConfiguration;
    
    PendingDeletionWindowInDays?: number;
}
export declare namespace KeyMetadata {
    
    const filterSensitiveLog: (obj: KeyMetadata) => any;
}
export interface CreateKeyResponse {
    
    KeyMetadata?: KeyMetadata;
}
export declare namespace CreateKeyResponse {
    
    const filterSensitiveLog: (obj: CreateKeyResponse) => any;
}

export declare class MalformedPolicyDocumentException extends __BaseException {
    readonly name: "MalformedPolicyDocumentException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<MalformedPolicyDocumentException, __BaseException>);
}

export declare class TagException extends __BaseException {
    readonly name: "TagException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<TagException, __BaseException>);
}

export declare class UnsupportedOperationException extends __BaseException {
    readonly name: "UnsupportedOperationException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UnsupportedOperationException, __BaseException>);
}

export declare class CustomKeyStoreHasCMKsException extends __BaseException {
    readonly name: "CustomKeyStoreHasCMKsException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<CustomKeyStoreHasCMKsException, __BaseException>);
}

export interface CustomKeyStoresListEntry {
    
    CustomKeyStoreId?: string;
    
    CustomKeyStoreName?: string;
    
    CloudHsmClusterId?: string;
    
    TrustAnchorCertificate?: string;
    
    ConnectionState?: ConnectionStateType | string;
    
    ConnectionErrorCode?: ConnectionErrorCodeType | string;
    
    CreationDate?: Date;
}
export declare namespace CustomKeyStoresListEntry {
    
    const filterSensitiveLog: (obj: CustomKeyStoresListEntry) => any;
}
export declare enum DataKeyPairSpec {
    ECC_NIST_P256 = "ECC_NIST_P256",
    ECC_NIST_P384 = "ECC_NIST_P384",
    ECC_NIST_P521 = "ECC_NIST_P521",
    ECC_SECG_P256K1 = "ECC_SECG_P256K1",
    RSA_2048 = "RSA_2048",
    RSA_3072 = "RSA_3072",
    RSA_4096 = "RSA_4096"
}
export declare enum DataKeySpec {
    AES_128 = "AES_128",
    AES_256 = "AES_256"
}
export interface DecryptRequest {
    
    CiphertextBlob: Uint8Array | undefined;
    
    EncryptionContext?: {
        [key: string]: string;
    };
    
    GrantTokens?: string[];
    
    KeyId?: string;
    
    EncryptionAlgorithm?: EncryptionAlgorithmSpec | string;
}
export declare namespace DecryptRequest {
    
    const filterSensitiveLog: (obj: DecryptRequest) => any;
}
export interface DecryptResponse {
    
    KeyId?: string;
    
    Plaintext?: Uint8Array;
    
    EncryptionAlgorithm?: EncryptionAlgorithmSpec | string;
}
export declare namespace DecryptResponse {
    
    const filterSensitiveLog: (obj: DecryptResponse) => any;
}

export declare class IncorrectKeyException extends __BaseException {
    readonly name: "IncorrectKeyException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<IncorrectKeyException, __BaseException>);
}

export declare class InvalidCiphertextException extends __BaseException {
    readonly name: "InvalidCiphertextException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidCiphertextException, __BaseException>);
}

export declare class InvalidKeyUsageException extends __BaseException {
    readonly name: "InvalidKeyUsageException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidKeyUsageException, __BaseException>);
}

export declare class KeyUnavailableException extends __BaseException {
    readonly name: "KeyUnavailableException";
    readonly $fault: "server";
    
    constructor(opts: __ExceptionOptionType<KeyUnavailableException, __BaseException>);
}
export interface DeleteAliasRequest {
    
    AliasName: string | undefined;
}
export declare namespace DeleteAliasRequest {
    
    const filterSensitiveLog: (obj: DeleteAliasRequest) => any;
}
export interface DeleteCustomKeyStoreRequest {
    
    CustomKeyStoreId: string | undefined;
}
export declare namespace DeleteCustomKeyStoreRequest {
    
    const filterSensitiveLog: (obj: DeleteCustomKeyStoreRequest) => any;
}
export interface DeleteCustomKeyStoreResponse {
}
export declare namespace DeleteCustomKeyStoreResponse {
    
    const filterSensitiveLog: (obj: DeleteCustomKeyStoreResponse) => any;
}
export interface DeleteImportedKeyMaterialRequest {
    
    KeyId: string | undefined;
}
export declare namespace DeleteImportedKeyMaterialRequest {
    
    const filterSensitiveLog: (obj: DeleteImportedKeyMaterialRequest) => any;
}
export interface DescribeCustomKeyStoresRequest {
    
    CustomKeyStoreId?: string;
    
    CustomKeyStoreName?: string;
    
    Limit?: number;
    
    Marker?: string;
}
export declare namespace DescribeCustomKeyStoresRequest {
    
    const filterSensitiveLog: (obj: DescribeCustomKeyStoresRequest) => any;
}
export interface DescribeCustomKeyStoresResponse {
    
    CustomKeyStores?: CustomKeyStoresListEntry[];
    
    NextMarker?: string;
    
    Truncated?: boolean;
}
export declare namespace DescribeCustomKeyStoresResponse {
    
    const filterSensitiveLog: (obj: DescribeCustomKeyStoresResponse) => any;
}

export declare class InvalidMarkerException extends __BaseException {
    readonly name: "InvalidMarkerException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidMarkerException, __BaseException>);
}
export interface DescribeKeyRequest {
    
    KeyId: string | undefined;
    
    GrantTokens?: string[];
}
export declare namespace DescribeKeyRequest {
    
    const filterSensitiveLog: (obj: DescribeKeyRequest) => any;
}
export interface DescribeKeyResponse {
    
    KeyMetadata?: KeyMetadata;
}
export declare namespace DescribeKeyResponse {
    
    const filterSensitiveLog: (obj: DescribeKeyResponse) => any;
}
export interface DisableKeyRequest {
    
    KeyId: string | undefined;
}
export declare namespace DisableKeyRequest {
    
    const filterSensitiveLog: (obj: DisableKeyRequest) => any;
}
export interface DisableKeyRotationRequest {
    
    KeyId: string | undefined;
}
export declare namespace DisableKeyRotationRequest {
    
    const filterSensitiveLog: (obj: DisableKeyRotationRequest) => any;
}
export interface DisconnectCustomKeyStoreRequest {
    
    CustomKeyStoreId: string | undefined;
}
export declare namespace DisconnectCustomKeyStoreRequest {
    
    const filterSensitiveLog: (obj: DisconnectCustomKeyStoreRequest) => any;
}
export interface DisconnectCustomKeyStoreResponse {
}
export declare namespace DisconnectCustomKeyStoreResponse {
    
    const filterSensitiveLog: (obj: DisconnectCustomKeyStoreResponse) => any;
}
export interface EnableKeyRequest {
    
    KeyId: string | undefined;
}
export declare namespace EnableKeyRequest {
    
    const filterSensitiveLog: (obj: EnableKeyRequest) => any;
}
export interface EnableKeyRotationRequest {
    
    KeyId: string | undefined;
}
export declare namespace EnableKeyRotationRequest {
    
    const filterSensitiveLog: (obj: EnableKeyRotationRequest) => any;
}
export interface EncryptRequest {
    
    KeyId: string | undefined;
    
    Plaintext: Uint8Array | undefined;
    
    EncryptionContext?: {
        [key: string]: string;
    };
    
    GrantTokens?: string[];
    
    EncryptionAlgorithm?: EncryptionAlgorithmSpec | string;
}
export declare namespace EncryptRequest {
    
    const filterSensitiveLog: (obj: EncryptRequest) => any;
}
export interface EncryptResponse {
    
    CiphertextBlob?: Uint8Array;
    
    KeyId?: string;
    
    EncryptionAlgorithm?: EncryptionAlgorithmSpec | string;
}
export declare namespace EncryptResponse {
    
    const filterSensitiveLog: (obj: EncryptResponse) => any;
}

export declare class ExpiredImportTokenException extends __BaseException {
    readonly name: "ExpiredImportTokenException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ExpiredImportTokenException, __BaseException>);
}
export interface GenerateDataKeyRequest {
    
    KeyId: string | undefined;
    
    EncryptionContext?: {
        [key: string]: string;
    };
    
    NumberOfBytes?: number;
    
    KeySpec?: DataKeySpec | string;
    
    GrantTokens?: string[];
}
export declare namespace GenerateDataKeyRequest {
    
    const filterSensitiveLog: (obj: GenerateDataKeyRequest) => any;
}
export interface GenerateDataKeyResponse {
    
    CiphertextBlob?: Uint8Array;
    
    Plaintext?: Uint8Array;
    
    KeyId?: string;
}
export declare namespace GenerateDataKeyResponse {
    
    const filterSensitiveLog: (obj: GenerateDataKeyResponse) => any;
}
export interface GenerateDataKeyPairRequest {
    
    EncryptionContext?: {
        [key: string]: string;
    };
    
    KeyId: string | undefined;
    
    KeyPairSpec: DataKeyPairSpec | string | undefined;
    
    GrantTokens?: string[];
}
export declare namespace GenerateDataKeyPairRequest {
    
    const filterSensitiveLog: (obj: GenerateDataKeyPairRequest) => any;
}
export interface GenerateDataKeyPairResponse {
    
    PrivateKeyCiphertextBlob?: Uint8Array;
    
    PrivateKeyPlaintext?: Uint8Array;
    
    PublicKey?: Uint8Array;
    
    KeyId?: string;
    
    KeyPairSpec?: DataKeyPairSpec | string;
}
export declare namespace GenerateDataKeyPairResponse {
    
    const filterSensitiveLog: (obj: GenerateDataKeyPairResponse) => any;
}
export interface GenerateDataKeyPairWithoutPlaintextRequest {
    
    EncryptionContext?: {
        [key: string]: string;
    };
    
    KeyId: string | undefined;
    
    KeyPairSpec: DataKeyPairSpec | string | undefined;
    
    GrantTokens?: string[];
}
export declare namespace GenerateDataKeyPairWithoutPlaintextRequest {
    
    const filterSensitiveLog: (obj: GenerateDataKeyPairWithoutPlaintextRequest) => any;
}
export interface GenerateDataKeyPairWithoutPlaintextResponse {
    
    PrivateKeyCiphertextBlob?: Uint8Array;
    
    PublicKey?: Uint8Array;
    
    KeyId?: string;
    
    KeyPairSpec?: DataKeyPairSpec | string;
}
export declare namespace GenerateDataKeyPairWithoutPlaintextResponse {
    
    const filterSensitiveLog: (obj: GenerateDataKeyPairWithoutPlaintextResponse) => any;
}
export interface GenerateDataKeyWithoutPlaintextRequest {
    
    KeyId: string | undefined;
    
    EncryptionContext?: {
        [key: string]: string;
    };
    
    KeySpec?: DataKeySpec | string;
    
    NumberOfBytes?: number;
    
    GrantTokens?: string[];
}
export declare namespace GenerateDataKeyWithoutPlaintextRequest {
    
    const filterSensitiveLog: (obj: GenerateDataKeyWithoutPlaintextRequest) => any;
}
export interface GenerateDataKeyWithoutPlaintextResponse {
    
    CiphertextBlob?: Uint8Array;
    
    KeyId?: string;
}
export declare namespace GenerateDataKeyWithoutPlaintextResponse {
    
    const filterSensitiveLog: (obj: GenerateDataKeyWithoutPlaintextResponse) => any;
}
export interface GenerateRandomRequest {
    
    NumberOfBytes?: number;
    
    CustomKeyStoreId?: string;
}
export declare namespace GenerateRandomRequest {
    
    const filterSensitiveLog: (obj: GenerateRandomRequest) => any;
}
export interface GenerateRandomResponse {
    
    Plaintext?: Uint8Array;
}
export declare namespace GenerateRandomResponse {
    
    const filterSensitiveLog: (obj: GenerateRandomResponse) => any;
}
export interface GetKeyPolicyRequest {
    
    KeyId: string | undefined;
    
    PolicyName: string | undefined;
}
export declare namespace GetKeyPolicyRequest {
    
    const filterSensitiveLog: (obj: GetKeyPolicyRequest) => any;
}
export interface GetKeyPolicyResponse {
    
    Policy?: string;
}
export declare namespace GetKeyPolicyResponse {
    
    const filterSensitiveLog: (obj: GetKeyPolicyResponse) => any;
}
export interface GetKeyRotationStatusRequest {
    
    KeyId: string | undefined;
}
export declare namespace GetKeyRotationStatusRequest {
    
    const filterSensitiveLog: (obj: GetKeyRotationStatusRequest) => any;
}
export interface GetKeyRotationStatusResponse {
    
    KeyRotationEnabled?: boolean;
}
export declare namespace GetKeyRotationStatusResponse {
    
    const filterSensitiveLog: (obj: GetKeyRotationStatusResponse) => any;
}
export declare enum WrappingKeySpec {
    RSA_2048 = "RSA_2048"
}
export interface GetParametersForImportRequest {
    
    KeyId: string | undefined;
    
    WrappingAlgorithm: AlgorithmSpec | string | undefined;
    
    WrappingKeySpec: WrappingKeySpec | string | undefined;
}
export declare namespace GetParametersForImportRequest {
    
    const filterSensitiveLog: (obj: GetParametersForImportRequest) => any;
}
export interface GetParametersForImportResponse {
    
    KeyId?: string;
    
    ImportToken?: Uint8Array;
    
    PublicKey?: Uint8Array;
    
    ParametersValidTo?: Date;
}
export declare namespace GetParametersForImportResponse {
    
    const filterSensitiveLog: (obj: GetParametersForImportResponse) => any;
}
export interface GetPublicKeyRequest {
    
    KeyId: string | undefined;
    
    GrantTokens?: string[];
}
export declare namespace GetPublicKeyRequest {
    
    const filterSensitiveLog: (obj: GetPublicKeyRequest) => any;
}
export interface GetPublicKeyResponse {
    
    KeyId?: string;
    
    PublicKey?: Uint8Array;
    
    CustomerMasterKeySpec?: CustomerMasterKeySpec | string;
    
    KeySpec?: KeySpec | string;
    
    KeyUsage?: KeyUsageType | string;
    
    EncryptionAlgorithms?: (EncryptionAlgorithmSpec | string)[];
    
    SigningAlgorithms?: (SigningAlgorithmSpec | string)[];
}
export declare namespace GetPublicKeyResponse {
    
    const filterSensitiveLog: (obj: GetPublicKeyResponse) => any;
}

export interface GrantListEntry {
    
    KeyId?: string;
    
    GrantId?: string;
    
    Name?: string;
    
    CreationDate?: Date;
    
    GranteePrincipal?: string;
    
    RetiringPrincipal?: string;
    
    IssuingAccount?: string;
    
    Operations?: (GrantOperation | string)[];
    
    Constraints?: GrantConstraints;
}
export declare namespace GrantListEntry {
    
    const filterSensitiveLog: (obj: GrantListEntry) => any;
}
export interface ImportKeyMaterialRequest {
    
    KeyId: string | undefined;
    
    ImportToken: Uint8Array | undefined;
    
    EncryptedKeyMaterial: Uint8Array | undefined;
    
    ValidTo?: Date;
    
    ExpirationModel?: ExpirationModelType | string;
}
export declare namespace ImportKeyMaterialRequest {
    
    const filterSensitiveLog: (obj: ImportKeyMaterialRequest) => any;
}
export interface ImportKeyMaterialResponse {
}
export declare namespace ImportKeyMaterialResponse {
    
    const filterSensitiveLog: (obj: ImportKeyMaterialResponse) => any;
}

export declare class IncorrectKeyMaterialException extends __BaseException {
    readonly name: "IncorrectKeyMaterialException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<IncorrectKeyMaterialException, __BaseException>);
}

export declare class InvalidImportTokenException extends __BaseException {
    readonly name: "InvalidImportTokenException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidImportTokenException, __BaseException>);
}

export declare class InvalidGrantIdException extends __BaseException {
    readonly name: "InvalidGrantIdException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidGrantIdException, __BaseException>);
}

export interface KeyListEntry {
    
    KeyId?: string;
    
    KeyArn?: string;
}
export declare namespace KeyListEntry {
    
    const filterSensitiveLog: (obj: KeyListEntry) => any;
}

export declare class KMSInvalidSignatureException extends __BaseException {
    readonly name: "KMSInvalidSignatureException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<KMSInvalidSignatureException, __BaseException>);
}
export interface ListAliasesRequest {
    
    KeyId?: string;
    
    Limit?: number;
    
    Marker?: string;
}
export declare namespace ListAliasesRequest {
    
    const filterSensitiveLog: (obj: ListAliasesRequest) => any;
}
export interface ListAliasesResponse {
    
    Aliases?: AliasListEntry[];
    
    NextMarker?: string;
    
    Truncated?: boolean;
}
export declare namespace ListAliasesResponse {
    
    const filterSensitiveLog: (obj: ListAliasesResponse) => any;
}
export interface ListGrantsRequest {
    
    Limit?: number;
    
    Marker?: string;
    
    KeyId: string | undefined;
    
    GrantId?: string;
    
    GranteePrincipal?: string;
}
export declare namespace ListGrantsRequest {
    
    const filterSensitiveLog: (obj: ListGrantsRequest) => any;
}
export interface ListGrantsResponse {
    
    Grants?: GrantListEntry[];
    
    NextMarker?: string;
    
    Truncated?: boolean;
}
export declare namespace ListGrantsResponse {
    
    const filterSensitiveLog: (obj: ListGrantsResponse) => any;
}
export interface ListKeyPoliciesRequest {
    
    KeyId: string | undefined;
    
    Limit?: number;
    
    Marker?: string;
}
export declare namespace ListKeyPoliciesRequest {
    
    const filterSensitiveLog: (obj: ListKeyPoliciesRequest) => any;
}
export interface ListKeyPoliciesResponse {
    
    PolicyNames?: string[];
    
    NextMarker?: string;
    
    Truncated?: boolean;
}
export declare namespace ListKeyPoliciesResponse {
    
    const filterSensitiveLog: (obj: ListKeyPoliciesResponse) => any;
}
export interface ListKeysRequest {
    
    Limit?: number;
    
    Marker?: string;
}
export declare namespace ListKeysRequest {
    
    const filterSensitiveLog: (obj: ListKeysRequest) => any;
}
export interface ListKeysResponse {
    
    Keys?: KeyListEntry[];
    
    NextMarker?: string;
    
    Truncated?: boolean;
}
export declare namespace ListKeysResponse {
    
    const filterSensitiveLog: (obj: ListKeysResponse) => any;
}
export interface ListResourceTagsRequest {
    
    KeyId: string | undefined;
    
    Limit?: number;
    
    Marker?: string;
}
export declare namespace ListResourceTagsRequest {
    
    const filterSensitiveLog: (obj: ListResourceTagsRequest) => any;
}
export interface ListResourceTagsResponse {
    
    Tags?: Tag[];
    
    NextMarker?: string;
    
    Truncated?: boolean;
}
export declare namespace ListResourceTagsResponse {
    
    const filterSensitiveLog: (obj: ListResourceTagsResponse) => any;
}
export interface ListRetirableGrantsRequest {
    
    Limit?: number;
    
    Marker?: string;
    
    RetiringPrincipal: string | undefined;
}
export declare namespace ListRetirableGrantsRequest {
    
    const filterSensitiveLog: (obj: ListRetirableGrantsRequest) => any;
}
export declare enum MessageType {
    DIGEST = "DIGEST",
    RAW = "RAW"
}
export interface PutKeyPolicyRequest {
    
    KeyId: string | undefined;
    
    PolicyName: string | undefined;
    
    Policy: string | undefined;
    
    BypassPolicyLockoutSafetyCheck?: boolean;
}
export declare namespace PutKeyPolicyRequest {
    
    const filterSensitiveLog: (obj: PutKeyPolicyRequest) => any;
}
export interface ReEncryptRequest {
    
    CiphertextBlob: Uint8Array | undefined;
    
    SourceEncryptionContext?: {
        [key: string]: string;
    };
    
    SourceKeyId?: string;
    
    DestinationKeyId: string | undefined;
    
    DestinationEncryptionContext?: {
        [key: string]: string;
    };
    
    SourceEncryptionAlgorithm?: EncryptionAlgorithmSpec | string;
    
    DestinationEncryptionAlgorithm?: EncryptionAlgorithmSpec | string;
    
    GrantTokens?: string[];
}
export declare namespace ReEncryptRequest {
    
    const filterSensitiveLog: (obj: ReEncryptRequest) => any;
}
export interface ReEncryptResponse {
    
    CiphertextBlob?: Uint8Array;
    
    SourceKeyId?: string;
    
    KeyId?: string;
    
    SourceEncryptionAlgorithm?: EncryptionAlgorithmSpec | string;
    
    DestinationEncryptionAlgorithm?: EncryptionAlgorithmSpec | string;
}
export declare namespace ReEncryptResponse {
    
    const filterSensitiveLog: (obj: ReEncryptResponse) => any;
}
export interface ReplicateKeyRequest {
    
    KeyId: string | undefined;
    
    ReplicaRegion: string | undefined;
    
    Policy?: string;
    
    BypassPolicyLockoutSafetyCheck?: boolean;
    
    Description?: string;
    
    Tags?: Tag[];
}
export declare namespace ReplicateKeyRequest {
    
    const filterSensitiveLog: (obj: ReplicateKeyRequest) => any;
}
export interface ReplicateKeyResponse {
    
    ReplicaKeyMetadata?: KeyMetadata;
    
    ReplicaPolicy?: string;
    
    ReplicaTags?: Tag[];
}
export declare namespace ReplicateKeyResponse {
    
    const filterSensitiveLog: (obj: ReplicateKeyResponse) => any;
}
export interface RetireGrantRequest {
    
    GrantToken?: string;
    
    KeyId?: string;
    
    GrantId?: string;
}
export declare namespace RetireGrantRequest {
    
    const filterSensitiveLog: (obj: RetireGrantRequest) => any;
}
export interface RevokeGrantRequest {
    
    KeyId: string | undefined;
    
    GrantId: string | undefined;
}
export declare namespace RevokeGrantRequest {
    
    const filterSensitiveLog: (obj: RevokeGrantRequest) => any;
}
export interface ScheduleKeyDeletionRequest {
    
    KeyId: string | undefined;
    
    PendingWindowInDays?: number;
}
export declare namespace ScheduleKeyDeletionRequest {
    
    const filterSensitiveLog: (obj: ScheduleKeyDeletionRequest) => any;
}
export interface ScheduleKeyDeletionResponse {
    
    KeyId?: string;
    
    DeletionDate?: Date;
    
    KeyState?: KeyState | string;
    
    PendingWindowInDays?: number;
}
export declare namespace ScheduleKeyDeletionResponse {
    
    const filterSensitiveLog: (obj: ScheduleKeyDeletionResponse) => any;
}
export interface SignRequest {
    
    KeyId: string | undefined;
    
    Message: Uint8Array | undefined;
    
    MessageType?: MessageType | string;
    
    GrantTokens?: string[];
    
    SigningAlgorithm: SigningAlgorithmSpec | string | undefined;
}
export declare namespace SignRequest {
    
    const filterSensitiveLog: (obj: SignRequest) => any;
}
export interface SignResponse {
    
    KeyId?: string;
    
    Signature?: Uint8Array;
    
    SigningAlgorithm?: SigningAlgorithmSpec | string;
}
export declare namespace SignResponse {
    
    const filterSensitiveLog: (obj: SignResponse) => any;
}
export interface TagResourceRequest {
    
    KeyId: string | undefined;
    
    Tags: Tag[] | undefined;
}
export declare namespace TagResourceRequest {
    
    const filterSensitiveLog: (obj: TagResourceRequest) => any;
}
export interface UntagResourceRequest {
    
    KeyId: string | undefined;
    
    TagKeys: string[] | undefined;
}
export declare namespace UntagResourceRequest {
    
    const filterSensitiveLog: (obj: UntagResourceRequest) => any;
}
export interface UpdateAliasRequest {
    
    AliasName: string | undefined;
    
    TargetKeyId: string | undefined;
}
export declare namespace UpdateAliasRequest {
    
    const filterSensitiveLog: (obj: UpdateAliasRequest) => any;
}
export interface UpdateCustomKeyStoreRequest {
    
    CustomKeyStoreId: string | undefined;
    
    NewCustomKeyStoreName?: string;
    
    KeyStorePassword?: string;
    
    CloudHsmClusterId?: string;
}
export declare namespace UpdateCustomKeyStoreRequest {
    
    const filterSensitiveLog: (obj: UpdateCustomKeyStoreRequest) => any;
}
export interface UpdateCustomKeyStoreResponse {
}
export declare namespace UpdateCustomKeyStoreResponse {
    
    const filterSensitiveLog: (obj: UpdateCustomKeyStoreResponse) => any;
}
export interface UpdateKeyDescriptionRequest {
    
    KeyId: string | undefined;
    
    Description: string | undefined;
}
export declare namespace UpdateKeyDescriptionRequest {
    
    const filterSensitiveLog: (obj: UpdateKeyDescriptionRequest) => any;
}
export interface UpdatePrimaryRegionRequest {
    
    KeyId: string | undefined;
    
    PrimaryRegion: string | undefined;
}
export declare namespace UpdatePrimaryRegionRequest {
    
    const filterSensitiveLog: (obj: UpdatePrimaryRegionRequest) => any;
}
export interface VerifyRequest {
    
    KeyId: string | undefined;
    
    Message: Uint8Array | undefined;
    
    MessageType?: MessageType | string;
    
    Signature: Uint8Array | undefined;
    
    SigningAlgorithm: SigningAlgorithmSpec | string | undefined;
    
    GrantTokens?: string[];
}
export declare namespace VerifyRequest {
    
    const filterSensitiveLog: (obj: VerifyRequest) => any;
}
export interface VerifyResponse {
    
    KeyId?: string;
    
    SignatureValid?: boolean;
    
    SigningAlgorithm?: SigningAlgorithmSpec | string;
}
export declare namespace VerifyResponse {
    
    const filterSensitiveLog: (obj: VerifyResponse) => any;
}
